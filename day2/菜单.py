# -*- coding: utf-8 -*-
'''
menu = {
    '京东': {
        '家用电器': ['电视', '空调', '洗衣机', '冰箱', '热水器', '微波炉', '音响']
    },
    '天猫': {
        '电脑配件': ['显示器', 'CPU', '主板', '内存', '电源', '散热器', '显卡', '声卡']
    },
    '苏宁易购': {
        '海鲜水产': ['三文鱼', '元贝', '扇贝', '大闸蟹', '海参', '北极甜虾', '胖头鱼']
    }
}
'''
'数码产品': [],
            '清洁用品': [],
'''
menu = {
    'stu001': 'clause',
    'stu002': 'xiaoming',
    'stu003': 'peter'
}

for i,j in menu.items():
    print(i, j)
#输出：
#stu002 xiaoming
#stu001 clause
#stu003 peter
两种循环方法区别，第一种方法更高效，它是直接通过value取key，第二种是利用items 把字典变成列表，数据量大时，很耗时

'''
#打印key值：
for i in menu:
    print(i)
#输出
# stu002
#stu001
#stu003

#打印value：
for i in menu:
    print(menu[i])
#输出：
#xiaoming
#clause
#peter
'''


'''
#改值,字典取元素用key，列表取元素用index，key尽量不要写中文，编码不一致时，取不出来
menu['京东']['家用电器'][0] = '投影仪'
#字典其他常用方法：
#打印所有的value，不包括key
#print(menu.values())
#输出：
#dict_values([{'家用电器': ['投影仪', '空调', '洗衣机', '冰箱', '热水器', '微波炉', '音响']}, {'电脑配件': ['显示器', 'CPU', '主板', '内存', '电源', '散热器', '显卡', '声卡']}, {'海鲜水产': ['三文鱼', '元贝', '扇贝', '大闸蟹', '海参', '北极甜虾', '胖头鱼']}])

#打印所有的key：
#print(menu.keys())
#输出：
#dict_keys(['京东', '天猫', '苏宁易购'])

#setdefault,如果key存在，返回key的value，如果key不存在于字典中，将会添加key并将值设为default
#menu.setdefault('天猫a', {'www.baidu.com': [1, 2]})
#print(menu)
#输出：
#{'京东': {'家用电器': ['投影仪', '空调', '洗衣机', '冰箱', '热水器', '微波炉', '音响']}, '天猫a': {'www.baidu.com': [1, 2]}, '天猫': {'电脑配件': ['显示器', 'CPU', '主板', '内存', '电源', '散热器', '显卡', '声卡']}, '苏宁易购': {'海鲜水产': ['三文鱼', '元贝', '扇贝', '大闸蟹', '海参', '北极甜虾', '胖头鱼']}}

#update(dict2)把字典dict2的键/值对更新到dict里，作用合并两个字典，原来的key存在就覆盖，不存在就创建key
#items(),把字典转换为列表
#print(menu.items())
#输出：
#dict_items([('京东', {'家用电器': ['投影仪', '空调', '洗衣机', '冰箱', '热水器', '微波炉', '音响']}), ('天猫a', {'www.baidu.com': [1, 2]}), ('天猫', {'电脑配件': ['显示器', 'CPU', '主板', '内存', '电源', '散热器', '显卡', '声卡']}), ('苏宁易购', {'海鲜水产': ['三文鱼', '元贝', '扇贝', '大闸蟹', '海参', '北极甜虾', '胖头鱼']})])

#fromkeys()创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值,作用:初始化字典
#a = dict.fromkeys([1, 2, 3], 'test')
#print(a)
#输出：
#{1: 'test', 2: 'test', 3: 'test'}

#坑，举例：
a = dict.fromkeys([1, 2, 3], [110, {'name': 'sky'}, 666])
print(a)
a[1][1]['name'] = 'white'
print(a)
#输出：
# {1: [110, {'name': 'sky'}, 666], 2: [110, {'name': 'sky'}, 666], 3: [110, {'name': 'sky'}, 666]}
#{1: [110, {'name': 'white'}, 666], 2: [110, {'name': 'white'}, 666], 3: [110, {'name': 'white'}, 666]}
#由输出可知，更改fromkeys初始化的字典中的一个key的value，其它key的value也全部被更改了，即所有的key共享value的内存地址，以后用fromkeys初始化字典时，除非只有一层，如果字典有多层，尽量不用
'''

'''